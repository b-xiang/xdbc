/**
 *  preparedStatement.h
 *
 *  Copyright (C) 2002-2020 zosatapo
 *
 *  zosatapo  dertyang@hotmail.com
 */
 
#ifndef   __OPENCODE_XDBC_PREPAREDSTATEMENT_H__
#define   __OPENCODE_XDBC_PREPAREDSTATEMENT_H__

#include "xdbc/xdefine.h"

#include "xdbc/clob.h"
#include "xdbc/blob.h"

#include "xdbc/statement.h"

__OPENCODE_BEGIN_NAMESPACE

class __OPENCODE_XDBC_API_DECL PreparedStatement : public  SQLImplementation 
{
protected:
  virtual ~PreparedStatement(){}

public:
  /**
   * Executes the SQL query in this <code>PreparedStatement</code> object
   * and returns the <code>ResultSet</code> object generated by the query.
   *
   * @return a <code>ResultSet</code> object that contains the data produced by the
   *         query; never <code>null</code>
   * @exception SQLException if a database access error occurs or the SQL
   *            statement does not return a <code>ResultSet</code> object
   */
  virtual ResultSet* executeQuery(__XDBC_HOOK_DECLARE_ONCE) __XDBC_THROW_DECLARE(SQLException) = 0;
  

  /**
   * Executes the SQL statement in this <code>PreparedStatement</code> object,
   * which must be an SQL <code>INSERT</code>, <code>UPDATE</code> or
   * <code>DELETE</code> statement; or an SQL statement that returns nothing,
   * such as a DDL statement.
   *
   * @return either (1) the row count for <code>INSERT</code>, <code>UPDATE</code>,
   *         or <code>DELETE</code> statements
   *         or (2) 0 for SQL statements that return nothing
   * @exception SQLException if a database access error occurs or the SQL
   *            statement returns a <code>ResultSet</code> object
   */
  virtual int executeUpdate(__XDBC_HOOK_DECLARE_ONCE) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given XDBC <code>byte</code> value.
   * The driver converts this
   * to an SQL <code>TINYINT</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setByte(__XDBC_HOOK_DECLARE_MORE int paramIndex, const char& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setByte(__XDBC_HOOK_INVOKE_MORE paramIndex,value,false);
  }

  /**
   * Sets the designated parameter to the given XDBC <code>byte</code> value.
   * The driver converts this
   * to an SQL <code>TINYINT</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value      the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */  
  virtual void setByte(__XDBC_HOOK_DECLARE_MORE int paramIndex, const char& value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given XDBC <code>short</code> value.
   * The driver converts this
   * to an SQL <code>SMALLINT</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setShort(__XDBC_HOOK_DECLARE_MORE int paramIndex, const short& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setShort(__XDBC_HOOK_INVOKE_MORE paramIndex,value,false);
  }

  /**
   * Sets the designated parameter to the given XDBC <code>short</code> value.
   * The driver converts this
   * to an SQL <code>SMALLINT</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */  
  virtual void setShort(__XDBC_HOOK_DECLARE_MORE int paramIndex, const short& value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given XDBC <code>int</code> value.
   * The driver converts this
   * to an SQL <code>INTEGER</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setInt(__XDBC_HOOK_DECLARE_MORE int paramIndex, const int& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setInt(__XDBC_HOOK_INVOKE_MORE paramIndex,value,false);
  }

  /**
   * Sets the designated parameter to the given XDBC <code>int</code> value.
   * The driver converts this
   * to an SQL <code>INTEGER</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */    
  virtual void setInt(__XDBC_HOOK_DECLARE_MORE int paramIndex, const int& value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given XDBC <code>XLONG</code> value. 
   * The driver converts this
   * to an SQL <code>BIGINT</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setLong(__XDBC_HOOK_DECLARE_MORE int paramIndex, const XLONG& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setLong(__XDBC_HOOK_INVOKE_MORE paramIndex,value,false);
  }

  /**
   * Sets the designated parameter to the given XDBC <code>XLONG</code> value. 
   * The driver converts this
   * to an SQL <code>BIGINT</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */    
  virtual void setLong(__XDBC_HOOK_DECLARE_MORE int paramIndex, const XLONG& value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given XDBC <code>float</code> value.
   * The driver converts this
   * to an SQL <code>FLOAT</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setFloat(__XDBC_HOOK_DECLARE_MORE int paramIndex, const float& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setFloat(__XDBC_HOOK_INVOKE_MORE paramIndex,value,false);
  }

  /**
   * Sets the designated parameter to the given XDBC <code>float</code> value.
   * The driver converts this
   * to an SQL <code>FLOAT</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */    
  virtual void setFloat(__XDBC_HOOK_DECLARE_MORE int paramIndex, const float& value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given XDBC <code>double</code> value.
   * The driver converts this
   * to an SQL <code>DOUBLE</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setDouble(__XDBC_HOOK_DECLARE_MORE int paramIndex, const double& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setDouble(__XDBC_HOOK_INVOKE_MORE paramIndex,value,false);
  }

  /**
   * Sets the designated parameter to the given XDBC <code>double</code> value.
   * The driver converts this
   * to an SQL <code>DOUBLE</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */    
  virtual void setDouble(__XDBC_HOOK_DECLARE_MORE int paramIndex, const double& value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given XDBC <code>String</code> value.
   * The driver converts this
   * to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
   * (depending on the argument's
   * count relative to the driver's limits on <code>VARCHAR</code> values)
   * when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setString(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const string& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setString(__XDBC_HOOK_INVOKE_MORE paramIndex,&value,false);
  }

  /**
   * Sets the designated parameter to the given XDBC <code>String</code> value.
   * The driver converts this
   * to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
   * (depending on the argument's
   * count relative to the driver's limits on <code>VARCHAR</code> values)
   * when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */    
  virtual void setString(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const string* value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given XDBC <code>String</code> value.
   * The driver converts this
   * to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
   * (depending on the argument's
   * count relative to the driver's limits on <code>VARCHAR</code> values)
   * when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value      the parameter value
   * @param count      buffer size in bytes
   * @exception SQLException if a database access error occurs
   */ 
  virtual void setString(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const char* value,int count) __XDBC_THROW_DECLARE(SQLException)
  {
    setString(__XDBC_HOOK_INVOKE_MORE paramIndex,value,count,false);
  }

  /**
   * Sets the designated parameter to the given XDBC <code>String</code> value.
   * The driver converts this
   * to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value
   * (depending on the argument's
   * count relative to the driver's limits on <code>VARCHAR</code> values)
   * when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value      the parameter value
   * @param count      buffer size in bytes
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */     
  virtual void setString(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const char* value,int count,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;
  
  /**
   * Sets the designated parameter to the given <code>XDBC Date</code> value.
   * The driver converts this
   * to an SQL <code>DATE</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setDate(__XDBC_HOOK_DECLARE_MORE int paramIndex, const XDBC_DATE& value)__XDBC_THROW_DECLARE(SQLException)
  {
    setDate(__XDBC_HOOK_INVOKE_MORE paramIndex,&value,false);
  }

  /**
   * Sets the designated parameter to the given <code>XDBC Date</code> value.
   * The driver converts this
   * to an SQL <code>DATE</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */  
  virtual void setDate(__XDBC_HOOK_DECLARE_MORE int paramIndex, const XDBC_DATE* value,bool is_null)__XDBC_THROW_DECLARE(SQLException) = 0;
  
  /**
   * Sets the designated parameter to the given <code>XDBC Time</code> value.
   * The driver converts this
   * to an SQL <code>TIME</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setTime(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const XDBC_TIME& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setTime(__XDBC_HOOK_INVOKE_MORE paramIndex,&value,false);
  }

  /**
   * Sets the designated parameter to the given <code>XDBC Time</code> value.
   * The driver converts this
   * to an SQL <code>TIME</code> value when it sends it to the database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */  
  virtual void setTime(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const XDBC_TIME* value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;
  
  /**
   * Sets the designated parameter to the given <code>XDBC Timestamp</code> value.
   * The driver
   * converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
   * database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setTimestamp(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const XDBC_TIMESTAMP& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setTimestamp(__XDBC_HOOK_INVOKE_MORE paramIndex,&value,false);
  }

  /**
   * Sets the designated parameter to the given <code>XDBC Timestamp</code> value.
   * The driver
   * converts this to an SQL <code>TIMESTAMP</code> value when it sends it to the
   * database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */  
  virtual void setTimestamp(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const XDBC_TIMESTAMP* value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;
  
  /**
   * Sets the designated parameter to the given <code>XDBC Timestamp</code> value.
   * The driver
   * converts this to an SQL <code>INTERVAL</code> value when it sends it to the
   * database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @exception SQLException if a database access error occurs
   */
  virtual void setInterval(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const XDBC_INTERVAL& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setInterval(__XDBC_HOOK_INVOKE_MORE paramIndex,&value,false);
  }

  /**
   * Sets the designated parameter to the given <code>XDBC Timestamp</code> value.
   * The driver
   * converts this to an SQL <code>INTERVAL</code> value when it sends it to the
   * database.
   *
   * @param paramIndex the first parameter is 1, the second is 2, ...
   * @param value the parameter value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs 
   */    
  virtual void setInterval(__XDBC_HOOK_DECLARE_MORE int paramIndex,  const XDBC_INTERVAL* value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given <code>Blob</code> object.
   * The driver converts this to an SQL <code>BLOB</code> value when it
   * sends it to the database.
   *
   * @param i the first parameter is 1, the second is 2, ...
   * @param value a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
   * @param count buffer size in bytes
   * @exception SQLException if a database access error occurs
   */
  virtual void setBlob (__XDBC_HOOK_DECLARE_MORE int paramIndex,  const char* value,int count) __XDBC_THROW_DECLARE(SQLException)
  {
    setBlob(__XDBC_HOOK_INVOKE_MORE paramIndex,value,count);
  }

  /**
   * Sets the designated parameter to the given <code>Blob</code> object.
   * The driver converts this to an SQL <code>BLOB</code> value when it
   * sends it to the database.
   *
   * @param i the first parameter is 1, the second is 2, ...
   * @param value a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
   * @param count buffer size in bytes
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs
   */  
  virtual void setBlob (__XDBC_HOOK_DECLARE_MORE int paramIndex,  const char* value,int count,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;

  /**
   * Sets the designated parameter to the given <code>Clob</code> object.
   * The driver converts this to an SQL <code>CLOB</code> value when it
   * sends it to the database.
   *
   * @param i the first parameter is 1, the second is 2, ...
   * @param value a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
   * @param count buffer size in bytes
   * @exception SQLException if a database access error occurs
   */
  virtual void setClob (__XDBC_HOOK_DECLARE_MORE int paramIndex,  const char* value,int count) __XDBC_THROW_DECLARE(SQLException)
  {
    setClob(__XDBC_HOOK_INVOKE_MORE paramIndex,value,count,false);
  }

  /**
   * Sets the designated parameter to the given <code>Clob</code> object.
   * The driver converts this to an SQL <code>CLOB</code> value when it
   * sends it to the database.
   *
   * @param i the first parameter is 1, the second is 2, ...
   * @param value a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
   * @param count buffer size in bytes
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs
   */  
  virtual void setClob (__XDBC_HOOK_DECLARE_MORE int paramIndex,  const char* value,int count,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;


//================================================================
//XDBC Advanced Features
//================================================================
public:
  /**
   * Sets the designated parameter to the given <code>Blob</code> object.
   * The driver converts this to an SQL <code>BLOB</code> value when it
   * sends it to the database.
   *
   * @param i the first parameter is 1, the second is 2, ...
   * @param value a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
   * @exception SQLException if a database access error occurs
   */
  virtual void setBlob (__XDBC_HOOK_DECLARE_MORE int paramIndex,  const Blob& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setBlob(__XDBC_HOOK_INVOKE_MORE paramIndex,&value,false);
  }

  /**
   * Sets the designated parameter to the given <code>Blob</code> object.
   * The driver converts this to an SQL <code>BLOB</code> value when it
   * sends it to the database.
   *
   * @param i the first parameter is 1, the second is 2, ...
   * @param value a <code>Blob</code> object that maps an SQL <code>BLOB</code> value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs
   */
  virtual void setBlob (__XDBC_HOOK_DECLARE_MORE int paramIndex,  const Blob* value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0;
  
  /**
   * Sets the designated parameter to the given <code>Clob</code> object.
   * The driver converts this to an SQL <code>CLOB</code> value when it
   * sends it to the database.
   *
   * @param i the first parameter is 1, the second is 2, ...
   * @param value a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
   * @exception SQLException if a database access error occurs
   */

  virtual void setClob (__XDBC_HOOK_DECLARE_MORE int paramIndex, const Clob& value) __XDBC_THROW_DECLARE(SQLException)
  {
    setClob(__XDBC_HOOK_INVOKE_MORE paramIndex,&value,false);
  }

  /**
   * Sets the designated parameter to the given <code>Clob</code> object.
   * The driver converts this to an SQL <code>CLOB</code> value when it
   * sends it to the database.
   *
   * @param i the first parameter is 1, the second is 2, ...
   * @param value a <code>Clob</code> object that maps an SQL <code>CLOB</code> value
   * @param is_null    <code>true</code> if the paramIndex parameter value set was SQL
   *                   <code>NULL</code> and <code>false</code> otherwise
   * @exception SQLException if a database access error occurs
   */
  virtual void setClob (__XDBC_HOOK_DECLARE_MORE int paramIndex, const Clob* value,bool is_null) __XDBC_THROW_DECLARE(SQLException) = 0; 

};

__OPENCODE_END_NAMESPACE

#endif
